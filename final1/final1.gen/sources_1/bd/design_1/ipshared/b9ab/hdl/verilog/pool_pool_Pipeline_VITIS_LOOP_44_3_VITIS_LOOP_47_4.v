// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module pool_pool_Pipeline_VITIS_LOOP_44_3_VITIS_LOOP_47_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln39,
        kw,
        bound,
        conv_i_i722,
        conv_i8_i707,
        mul_i749,
        sext_ln44,
        mode,
        mat_in,
        p_out,
        p_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [0:0] sext_ln39;
input  [7:0] kw;
input  [15:0] bound;
input  [5:0] conv_i_i722;
input  [5:0] conv_i8_i707;
input  [15:0] mul_i749;
input  [5:0] sext_ln44;
input  [1:0] mode;
input  [63:0] mat_in;
output  [17:0] p_out;
output   p_out_ap_vld;

reg ap_idle;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg p_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
reg    ap_block_state6_io;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1072_1_fu_272_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire  signed [16:0] sext_ln44_cast_fu_212_p1;
reg  signed [16:0] sext_ln44_cast_reg_585;
wire  signed [16:0] mul_i749_cast_fu_216_p1;
reg  signed [16:0] mul_i749_cast_reg_590;
reg   [0:0] icmp_ln1072_1_reg_600;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter1_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter2_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter3_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter4_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter5_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter6_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter7_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter8_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter9_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter10_reg;
reg   [0:0] icmp_ln1072_1_reg_600_pp0_iter11_reg;
wire  signed [5:0] select_ln1072_fu_287_p3;
reg  signed [5:0] select_ln1072_reg_604;
reg  signed [5:0] select_ln1072_reg_604_pp0_iter1_reg;
reg  signed [5:0] select_ln1072_reg_604_pp0_iter2_reg;
reg  signed [5:0] select_ln1072_reg_604_pp0_iter3_reg;
wire  signed [16:0] grp_fu_533_p4;
reg  signed [16:0] add_ln1072_2_reg_616;
reg   [63:0] gmem_addr_2_reg_623;
reg   [63:0] gmem_addr_1_reg_629;
reg   [63:0] gmem_addr_reg_635;
wire   [17:0] trunc_ln1080_1_fu_473_p1;
reg   [17:0] trunc_ln1080_1_reg_641;
wire   [17:0] trunc_ln1080_fu_477_p1;
reg   [17:0] trunc_ln1080_reg_647;
wire   [17:0] trunc_ln885_fu_481_p1;
reg   [17:0] trunc_ln885_reg_653;
wire  signed [63:0] sext_ln1080_1_fu_373_p1;
wire  signed [63:0] sext_ln1080_fu_418_p1;
wire  signed [63:0] sext_ln885_fu_463_p1;
reg   [5:0] k_V_fu_96;
wire   [5:0] k_V_3_fu_313_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_k_V_2;
reg   [5:0] j_V_fu_100;
wire  signed [5:0] select_ln1072_1_fu_301_p3;
reg   [5:0] ap_sig_allocacmp_j_V_load;
reg   [15:0] indvar_flatten_fu_104;
wire   [15:0] add_ln1072_3_fu_278_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [17:0] empty_fu_108;
wire   [17:0] select_ln53_fu_490_p3;
wire   [17:0] select_ln52_fu_507_p3;
wire   [17:0] add_ln885_1_fu_519_p2;
wire   [17:0] sext_ln39_cast_fu_228_p3;
reg    ap_block_pp0_stage0_01001;
wire  signed [5:0] sext_ln1072_fu_262_p0;
wire  signed [7:0] sext_ln1072_fu_262_p1;
wire   [0:0] icmp_ln1072_fu_266_p2;
wire  signed [5:0] select_ln1072_fu_287_p1;
wire   [5:0] add_ln885_2_fu_295_p2;
wire  signed [16:0] sext_ln1540_2_fu_338_p1;
(* use_dsp48 = "no" *) wire   [16:0] ret_2_fu_341_p2;
wire   [18:0] shl_ln1080_1_fu_346_p3;
wire  signed [63:0] sext_ln1080_3_fu_354_p1;
wire   [63:0] add_ln1080_1_fu_358_p2;
wire   [61:0] trunc_ln1080_3_fu_363_p4;
wire  signed [16:0] sext_ln1540_1_fu_383_p1;
(* use_dsp48 = "no" *) wire   [16:0] ret_1_fu_386_p2;
wire   [18:0] shl_ln1_fu_391_p3;
wire  signed [63:0] sext_ln1080_2_fu_399_p1;
wire   [63:0] add_ln1080_fu_403_p2;
wire   [61:0] trunc_ln1080_2_fu_408_p4;
wire  signed [16:0] sext_ln1540_fu_428_p1;
(* use_dsp48 = "no" *) wire   [16:0] ret_fu_431_p2;
wire   [18:0] shl_ln_fu_436_p3;
wire  signed [63:0] sext_ln885_1_fu_444_p1;
wire   [63:0] add_ln885_fu_448_p2;
wire   [61:0] trunc_ln885_3_fu_453_p4;
wire   [0:0] icmp_ln1080_1_fu_485_p2;
wire   [0:0] icmp_ln1080_fu_502_p2;
wire  signed [16:0] grp_fu_533_p3;
reg    grp_fu_533_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

pool_ama_addmuladd_6s_6s_6s_17s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
ama_addmuladd_6s_6s_6s_17s_17_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln1072_1_fu_301_p3),
    .din1(conv_i_i722),
    .din2(conv_i8_i707),
    .din3(grp_fu_533_p3),
    .ce(grp_fu_533_ce),
    .dout(grp_fu_533_p4)
);

pool_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_108 <= sext_ln39_cast_fu_228_p3;
        end else if (((ap_enable_reg_pp0_iter13 == 1'b1) & (mode == 2'd0))) begin
            empty_fu_108 <= add_ln885_1_fu_519_p2;
        end else if (((ap_enable_reg_pp0_iter13 == 1'b1) & (mode == 2'd1))) begin
            empty_fu_108 <= select_ln52_fu_507_p3;
        end else if (((ap_enable_reg_pp0_iter13 == 1'b1) & (mode == 2'd2))) begin
            empty_fu_108 <= select_ln53_fu_490_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_1_fu_272_p2 == 1'd0))) begin
            indvar_flatten_fu_104 <= add_ln1072_3_fu_278_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_1_fu_272_p2 == 1'd0))) begin
            j_V_fu_100 <= select_ln1072_1_fu_301_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_V_fu_100 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_1_fu_272_p2 == 1'd0))) begin
            k_V_fu_96 <= k_V_3_fu_313_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_V_fu_96 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln1072_2_reg_616 <= grp_fu_533_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln1072_1_reg_600_pp0_iter10_reg <= icmp_ln1072_1_reg_600_pp0_iter9_reg;
        icmp_ln1072_1_reg_600_pp0_iter11_reg <= icmp_ln1072_1_reg_600_pp0_iter10_reg;
        icmp_ln1072_1_reg_600_pp0_iter2_reg <= icmp_ln1072_1_reg_600_pp0_iter1_reg;
        icmp_ln1072_1_reg_600_pp0_iter3_reg <= icmp_ln1072_1_reg_600_pp0_iter2_reg;
        icmp_ln1072_1_reg_600_pp0_iter4_reg <= icmp_ln1072_1_reg_600_pp0_iter3_reg;
        icmp_ln1072_1_reg_600_pp0_iter5_reg <= icmp_ln1072_1_reg_600_pp0_iter4_reg;
        icmp_ln1072_1_reg_600_pp0_iter6_reg <= icmp_ln1072_1_reg_600_pp0_iter5_reg;
        icmp_ln1072_1_reg_600_pp0_iter7_reg <= icmp_ln1072_1_reg_600_pp0_iter6_reg;
        icmp_ln1072_1_reg_600_pp0_iter8_reg <= icmp_ln1072_1_reg_600_pp0_iter7_reg;
        icmp_ln1072_1_reg_600_pp0_iter9_reg <= icmp_ln1072_1_reg_600_pp0_iter8_reg;
        select_ln1072_reg_604_pp0_iter2_reg <= select_ln1072_reg_604_pp0_iter1_reg;
        select_ln1072_reg_604_pp0_iter3_reg <= select_ln1072_reg_604_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln1072_1_reg_600 <= icmp_ln1072_1_fu_272_p2;
        icmp_ln1072_1_reg_600_pp0_iter1_reg <= icmp_ln1072_1_reg_600;
        mul_i749_cast_reg_590 <= mul_i749_cast_fu_216_p1;
        select_ln1072_reg_604_pp0_iter1_reg <= select_ln1072_reg_604;
        sext_ln44_cast_reg_585 <= sext_ln44_cast_fu_212_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd1))) begin
        gmem_addr_1_reg_629 <= sext_ln1080_fu_418_p1;
        trunc_ln1080_reg_647 <= trunc_ln1080_fu_477_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd2))) begin
        gmem_addr_2_reg_623 <= sext_ln1080_1_fu_373_p1;
        trunc_ln1080_1_reg_641 <= trunc_ln1080_1_fu_473_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd0))) begin
        gmem_addr_reg_635 <= sext_ln885_fu_463_p1;
        trunc_ln885_reg_653 <= trunc_ln885_fu_481_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1072_1_fu_272_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln1072_reg_604 <= select_ln1072_fu_287_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln1072_1_fu_272_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_V_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_V_load = j_V_fu_100;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_k_V_2 = 6'd0;
    end else begin
        ap_sig_allocacmp_k_V_2 = k_V_fu_96;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd2)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd1)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (mode == 2'd2)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_533_ce = 1'b1;
    end else begin
        grp_fu_533_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((mode == 2'd0)) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_635;
        end else if ((mode == 2'd1)) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_629;
        end else if ((mode == 2'd2)) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_623;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd2)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd0)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd1)) | ((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (mode == 2'd2)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1072_1_reg_600_pp0_iter11_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1072_3_fu_278_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln1080_1_fu_358_p2 = ($signed(sext_ln1080_3_fu_354_p1) + $signed(mat_in));

assign add_ln1080_fu_403_p2 = ($signed(sext_ln1080_2_fu_399_p1) + $signed(mat_in));

assign add_ln885_1_fu_519_p2 = (trunc_ln885_reg_653 + empty_fu_108);

assign add_ln885_2_fu_295_p2 = (ap_sig_allocacmp_j_V_load + 6'd1);

assign add_ln885_fu_448_p2 = ($signed(sext_ln885_1_fu_444_p1) + $signed(mat_in));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter12 == 1'b1) & (((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter12 == 1'b1) & (((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter12 == 1'b1) & (((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)))) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state6_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = (((mode == 2'd0) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd1) & (m_axi_gmem_RVALID == 1'b0)) | ((mode == 2'd2) & (m_axi_gmem_RVALID == 1'b0)));
end

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = (((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd0)) | ((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd1)) | ((m_axi_gmem_ARREADY == 1'b0) & (mode == 2'd2)));
end

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_533_p3 = ($signed(sext_ln44_cast_reg_585) + $signed(mul_i749_cast_reg_590));

assign icmp_ln1072_1_fu_272_p2 = ((ap_sig_allocacmp_indvar_flatten_load == bound) ? 1'b1 : 1'b0);

assign icmp_ln1072_fu_266_p2 = (($signed(sext_ln1072_fu_262_p1) < $signed(kw)) ? 1'b1 : 1'b0);

assign icmp_ln1080_1_fu_485_p2 = ((empty_fu_108 > trunc_ln1080_1_reg_641) ? 1'b1 : 1'b0);

assign icmp_ln1080_fu_502_p2 = ((empty_fu_108 > trunc_ln1080_reg_647) ? 1'b1 : 1'b0);

assign k_V_3_fu_313_p2 = ($signed(select_ln1072_fu_287_p3) + $signed(6'd1));

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_WDATA = 32'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd0;

assign m_axi_gmem_WUSER = 1'd0;

assign m_axi_gmem_WVALID = 1'b0;

assign mul_i749_cast_fu_216_p1 = $signed(mul_i749);

assign p_out = empty_fu_108;

assign ret_1_fu_386_p2 = ($signed(add_ln1072_2_reg_616) + $signed(sext_ln1540_1_fu_383_p1));

assign ret_2_fu_341_p2 = ($signed(add_ln1072_2_reg_616) + $signed(sext_ln1540_2_fu_338_p1));

assign ret_fu_431_p2 = ($signed(add_ln1072_2_reg_616) + $signed(sext_ln1540_fu_428_p1));

assign select_ln1072_1_fu_301_p3 = ((icmp_ln1072_fu_266_p2[0:0] == 1'b1) ? ap_sig_allocacmp_j_V_load : add_ln885_2_fu_295_p2);

assign select_ln1072_fu_287_p1 = ap_sig_allocacmp_k_V_2;

assign select_ln1072_fu_287_p3 = ((icmp_ln1072_fu_266_p2[0:0] == 1'b1) ? select_ln1072_fu_287_p1 : 6'd0);

assign select_ln52_fu_507_p3 = ((icmp_ln1080_fu_502_p2[0:0] == 1'b1) ? empty_fu_108 : trunc_ln1080_reg_647);

assign select_ln53_fu_490_p3 = ((icmp_ln1080_1_fu_485_p2[0:0] == 1'b1) ? trunc_ln1080_1_reg_641 : empty_fu_108);

assign sext_ln1072_fu_262_p0 = ap_sig_allocacmp_k_V_2;

assign sext_ln1072_fu_262_p1 = sext_ln1072_fu_262_p0;

assign sext_ln1080_1_fu_373_p1 = $signed(trunc_ln1080_3_fu_363_p4);

assign sext_ln1080_2_fu_399_p1 = $signed(shl_ln1_fu_391_p3);

assign sext_ln1080_3_fu_354_p1 = $signed(shl_ln1080_1_fu_346_p3);

assign sext_ln1080_fu_418_p1 = $signed(trunc_ln1080_2_fu_408_p4);

assign sext_ln1540_1_fu_383_p1 = select_ln1072_reg_604_pp0_iter3_reg;

assign sext_ln1540_2_fu_338_p1 = select_ln1072_reg_604_pp0_iter3_reg;

assign sext_ln1540_fu_428_p1 = select_ln1072_reg_604_pp0_iter3_reg;

assign sext_ln39_cast_fu_228_p3 = ((sext_ln39[0:0] == 1'b1) ? 18'd262143 : 18'd0);

assign sext_ln44_cast_fu_212_p1 = $signed(sext_ln44);

assign sext_ln885_1_fu_444_p1 = $signed(shl_ln_fu_436_p3);

assign sext_ln885_fu_463_p1 = $signed(trunc_ln885_3_fu_453_p4);

assign shl_ln1080_1_fu_346_p3 = {{ret_2_fu_341_p2}, {2'd0}};

assign shl_ln1_fu_391_p3 = {{ret_1_fu_386_p2}, {2'd0}};

assign shl_ln_fu_436_p3 = {{ret_fu_431_p2}, {2'd0}};

assign trunc_ln1080_1_fu_473_p1 = m_axi_gmem_RDATA[17:0];

assign trunc_ln1080_2_fu_408_p4 = {{add_ln1080_fu_403_p2[63:2]}};

assign trunc_ln1080_3_fu_363_p4 = {{add_ln1080_1_fu_358_p2[63:2]}};

assign trunc_ln1080_fu_477_p1 = m_axi_gmem_RDATA[17:0];

assign trunc_ln885_3_fu_453_p4 = {{add_ln885_fu_448_p2[63:2]}};

assign trunc_ln885_fu_481_p1 = m_axi_gmem_RDATA[17:0];

endmodule //pool_pool_Pipeline_VITIS_LOOP_44_3_VITIS_LOOP_47_4
