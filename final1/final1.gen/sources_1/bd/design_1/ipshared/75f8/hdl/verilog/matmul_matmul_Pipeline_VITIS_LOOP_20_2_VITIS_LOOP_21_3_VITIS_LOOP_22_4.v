// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matmul_matmul_Pipeline_VITIS_LOOP_20_2_VITIS_LOOP_21_3_VITIS_LOOP_22_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        A_W_cast,
        mat_A_cast,
        B_W_cast2,
        mat_A,
        mat_B,
        tmp_1,
        B_W,
        bound34,
        bound,
        sext_ln20,
        icmp_ln1072,
        mat_C
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [7:0] A_W_cast;
input  [1:0] mat_A_cast;
input  [7:0] B_W_cast2;
input  [63:0] mat_A;
input  [63:0] mat_B;
input  [1:0] tmp_1;
input  [7:0] B_W;
input  [23:0] bound34;
input  [15:0] bound;
input  [7:0] sext_ln20;
input  [0:0] icmp_ln1072;
input  [63:0] mat_C;

reg ap_idle;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage11;
reg   [0:0] icmp_ln1072_2_reg_1010;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_subdone;
reg    ap_condition_exit_pp0_iter0_stage11;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage15;
reg    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_pp0_stage15_subdone;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage15;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire  signed [14:0] sext_ln20_cast_fu_278_p1;
reg  signed [14:0] sext_ln20_cast_reg_982;
wire   [14:0] B_W_cast2_cast_fu_282_p1;
reg   [14:0] B_W_cast2_cast_reg_987;
wire  signed [14:0] A_W_cast_cast_fu_286_p1;
reg  signed [14:0] A_W_cast_cast_reg_993;
wire   [14:0] lhs_fu_325_p2;
reg   [14:0] lhs_reg_999;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [1:0] empty_fu_330_p1;
reg   [1:0] empty_reg_1005;
wire   [0:0] icmp_ln1072_2_fu_334_p2;
wire   [0:0] icmp_ln1072_3_fu_348_p2;
reg   [0:0] icmp_ln1072_3_reg_1014;
wire   [6:0] add_ln20_fu_353_p2;
reg   [6:0] add_ln20_reg_1026;
reg   [6:0] j_2_reg_1036;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state19_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
wire   [14:0] zext_ln1072_fu_410_p1;
reg   [14:0] zext_ln1072_reg_1041;
reg   [63:0] gmem_addr_reg_1046;
wire   [1:0] empty_25_fu_452_p2;
reg   [1:0] empty_25_reg_1052;
wire  signed [14:0] lhs_mid1_fu_477_p2;
reg  signed [14:0] lhs_mid1_reg_1057;
wire   [1:0] tmp_mid1_fu_486_p2;
reg   [1:0] tmp_mid1_reg_1063;
wire   [0:0] select_ln1072_7_fu_498_p3;
reg   [0:0] select_ln1072_7_reg_1068;
wire   [6:0] k_4_fu_504_p2;
reg   [6:0] k_4_reg_1076;
wire   [1:0] p_mid120_fu_514_p2;
reg   [1:0] p_mid120_reg_1081;
wire   [14:0] empty_22_fu_533_p2;
reg   [14:0] empty_22_reg_1086;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state20_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
wire   [1:0] empty_27_fu_537_p1;
reg   [1:0] empty_27_reg_1091;
reg   [63:0] gmem_addr_1_reg_1096;
wire   [6:0] select_ln1072_8_fu_580_p3;
reg   [6:0] select_ln1072_8_reg_1102;
wire   [14:0] zext_ln1072_1_fu_587_p1;
reg   [14:0] zext_ln1072_1_reg_1108;
reg   [63:0] gmem_addr_4_reg_1113;
wire   [14:0] p_mid114_fu_650_p2;
reg   [14:0] p_mid114_reg_1124;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
wire    ap_block_state21_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
wire   [1:0] add_ln232_1_fu_673_p2;
reg   [1:0] add_ln232_1_reg_1129;
reg   [63:0] gmem_addr_3_reg_1134;
reg   [63:0] gmem_addr_2_reg_1141;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
wire    ap_block_state22_pp0_stage5_iter1;
reg    ap_block_pp0_stage5_11001;
reg   [31:0] gmem_addr_read_reg_1147;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
wire   [31:0] empty_26_fu_784_p2;
reg   [31:0] empty_26_reg_1152;
reg    ap_block_pp0_stage11_11001;
reg   [31:0] gmem_addr_1_read_reg_1157;
reg   [31:0] gmem_addr_4_read_reg_1162;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
wire   [7:0] select_ln1072_9_fu_812_p3;
reg   [7:0] select_ln1072_9_reg_1167;
wire   [7:0] select_ln1072_10_fu_839_p3;
reg  signed [7:0] select_ln1072_10_reg_1172;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_11001;
reg   [31:0] gmem_addr_2_read_reg_1177;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire   [17:0] trunc_ln885_fu_872_p1;
reg  signed [17:0] trunc_ln885_reg_1192;
reg    ap_block_pp0_stage15_11001;
wire   [17:0] grp_fu_888_p3;
reg  signed [17:0] add_ln885_1_reg_1197;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_state24_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_subdone;
wire  signed [63:0] p_cast_cast_fu_442_p1;
wire  signed [63:0] p_cast_cast_mid164_fu_570_p1;
wire  signed [63:0] p_cast_cast_mid1_fu_615_p1;
wire  signed [63:0] sext_ln885_1_fu_705_p1;
wire  signed [63:0] sext_ln232_fu_763_p1;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_state7_io;
wire    ap_block_state23_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
wire    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage8_11001;
reg    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage2_01001;
reg   [6:0] rhs_fu_116;
wire   [6:0] j_fu_629_p2;
wire    ap_loop_init;
reg   [6:0] k_fu_120;
wire   [6:0] select_ln1072_13_fu_520_p3;
reg   [15:0] indvar_flatten_fu_124;
wire   [15:0] select_ln1072_14_fu_377_p3;
reg   [6:0] i_fu_128;
wire   [6:0] select_ln1072_3_fu_359_p3;
reg   [23:0] indvar_flatten93_fu_132;
wire   [23:0] add_ln1072_1_fu_339_p2;
wire    ap_block_pp0_stage0;
wire   [6:0] lhs_fu_325_p0;
wire  signed [7:0] lhs_fu_325_p1;
wire   [15:0] add_ln1072_fu_371_p2;
wire   [14:0] ret_fu_418_p2;
wire  signed [63:0] conv_i60_fu_423_p1;
wire   [63:0] empty_24_fu_427_p2;
wire   [61:0] p_cast_fu_432_p4;
wire   [1:0] tmp_fu_406_p2;
wire   [1:0] empty_23_fu_414_p1;
wire   [7:0] j_cast_fu_458_p1;
wire   [6:0] lhs_mid1_fu_477_p0;
wire  signed [7:0] lhs_mid1_fu_477_p1;
wire   [1:0] empty_30_fu_482_p1;
wire   [0:0] icmp_ln1072_1_fu_462_p2;
wire   [6:0] select_ln1072_fu_467_p3;
wire   [1:0] select_ln1072_4_fu_491_p3;
wire   [1:0] empty_31_fu_510_p1;
wire   [6:0] empty_22_fu_533_p0;
wire   [7:0] empty_22_fu_533_p1;
wire  signed [63:0] conv_i60_mid156_fu_552_p1;
wire   [63:0] p_mid158_fu_555_p2;
wire   [61:0] p_cast_mid_fu_560_p4;
wire   [6:0] select_ln1072_1_fu_541_p3;
wire   [14:0] select_ln1072_2_fu_547_p3;
wire   [14:0] ret_mid1_fu_590_p2;
wire  signed [63:0] conv_i60_mid1_fu_596_p1;
wire   [63:0] p_mid116_fu_600_p2;
wire   [61:0] p_cast_mid1_fu_605_p4;
wire   [1:0] add_ln232_2_fu_640_p2;
wire   [6:0] p_mid114_fu_650_p0;
wire   [7:0] p_mid114_fu_650_p1;
wire   [1:0] empty_32_fu_654_p1;
wire   [1:0] select_ln1072_6_fu_644_p3;
wire   [1:0] add_ln232_3_fu_658_p2;
wire   [1:0] select_ln1072_12_fu_663_p3;
wire   [1:0] trunc_ln232_fu_670_p1;
wire  signed [14:0] shl_ln1_fu_679_p1;
wire   [14:0] grp_fu_880_p3;
wire   [16:0] shl_ln1_fu_679_p3;
wire  signed [63:0] sext_ln885_2_fu_686_p1;
wire   [63:0] add_ln885_fu_690_p2;
wire   [61:0] trunc_ln885_1_fu_695_p4;
wire   [63:0] p_cast9_fu_715_p1;
wire   [63:0] empty_28_fu_718_p2;
wire   [63:0] p_cast9_mid1_fu_729_p1;
wire   [63:0] select_ln1072_5_fu_723_p3;
wire   [63:0] p_mid128_fu_732_p2;
wire   [63:0] select_ln1072_11_fu_737_p3;
wire   [63:0] indvar1_cast_fu_744_p1;
wire   [63:0] add_ln232_fu_747_p2;
wire   [61:0] trunc_ln232_2_fu_753_p4;
wire   [4:0] tmp_2_fu_773_p3;
wire   [31:0] p_cast10_fu_780_p1;
wire   [4:0] p_mid_fu_789_p3;
wire   [31:0] p_cast10_mid174_fu_796_p1;
wire   [31:0] p_mid176_fu_800_p2;
wire   [7:0] trunc_ln1072_fu_805_p1;
wire   [7:0] trunc_ln1072_1_fu_809_p1;
wire   [4:0] p_mid1_fu_819_p3;
wire   [31:0] p_cast10_mid1_fu_826_p1;
wire   [31:0] p_mid124_fu_830_p2;
wire   [7:0] trunc_ln1072_2_fu_835_p1;
wire    ap_block_pp0_stage14;
wire   [4:0] shl_ln_fu_848_p3;
wire   [31:0] zext_ln232_fu_855_p1;
wire   [31:0] lshr_ln232_fu_859_p2;
wire  signed [7:0] rhs_2_fu_864_p1;
wire   [6:0] grp_fu_880_p0;
wire  signed [7:0] grp_fu_880_p1;
wire   [6:0] grp_fu_880_p2;
reg    grp_fu_880_ce;
reg    grp_fu_888_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [14:0] grp_fu_880_p00;
wire   [14:0] grp_fu_880_p20;
wire   [14:0] lhs_fu_325_p00;
wire   [14:0] lhs_mid1_fu_477_p00;
reg    ap_condition_404;
reg    ap_condition_422;
reg    ap_condition_1075;
reg    ap_condition_1079;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

matmul_mul_7ns_8s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_7ns_8s_15_1_1_U3(
    .din0(lhs_fu_325_p0),
    .din1(lhs_fu_325_p1),
    .dout(lhs_fu_325_p2)
);

matmul_mul_7ns_8s_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_7ns_8s_15_1_1_U4(
    .din0(lhs_mid1_fu_477_p0),
    .din1(lhs_mid1_fu_477_p1),
    .dout(lhs_mid1_fu_477_p2)
);

matmul_mul_7ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_7ns_8ns_15_1_1_U5(
    .din0(empty_22_fu_533_p0),
    .din1(empty_22_fu_533_p1),
    .dout(empty_22_fu_533_p2)
);

matmul_mul_7ns_8ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 15 ))
mul_7ns_8ns_15_1_1_U6(
    .din0(p_mid114_fu_650_p0),
    .din1(p_mid114_fu_650_p1),
    .dout(p_mid114_fu_650_p2)
);

matmul_mac_muladd_7ns_8s_7ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 15 ))
mac_muladd_7ns_8s_7ns_15_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_880_p0),
    .din1(grp_fu_880_p1),
    .din2(grp_fu_880_p2),
    .ce(grp_fu_880_ce),
    .dout(grp_fu_880_p3)
);

matmul_mac_muladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
mac_muladd_8s_8s_18s_18_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rhs_2_fu_864_p1),
    .din1(select_ln1072_10_reg_1172),
    .din2(trunc_ln885_reg_1192),
    .ce(grp_fu_888_ce),
    .dout(grp_fu_888_p3)
);

matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage11),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage11_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage11)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_128 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_fu_128 <= select_ln1072_3_fu_359_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten93_fu_132 <= 24'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten93_fu_132 <= add_ln1072_1_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_124 <= 16'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten_fu_124 <= select_ln1072_14_fu_377_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_fu_120 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        k_fu_120 <= select_ln1072_13_fu_520_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        rhs_fu_116 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        rhs_fu_116 <= j_fu_629_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_W_cast_cast_reg_993 <= A_W_cast_cast_fu_286_p1;
        B_W_cast2_cast_reg_987[7 : 0] <= B_W_cast2_cast_fu_282_p1[7 : 0];
        sext_ln20_cast_reg_982 <= sext_ln20_cast_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_2_fu_334_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln20_reg_1026 <= add_ln20_fu_353_p2;
        icmp_ln1072_3_reg_1014 <= icmp_ln1072_3_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        add_ln232_1_reg_1129 <= add_ln232_1_fu_673_p2;
        gmem_addr_3_reg_1134 <= sext_ln885_1_fu_705_p1;
        p_mid114_reg_1124 <= p_mid114_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln885_1_reg_1197 <= grp_fu_888_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        empty_22_reg_1086 <= empty_22_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln1072_3_reg_1014 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        empty_25_reg_1052 <= empty_25_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_7_reg_1068 == 1'd1) & (icmp_ln1072_3_reg_1014 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        empty_26_reg_1152 <= empty_26_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_7_reg_1068 == 1'd1) & (icmp_ln1072_3_reg_1014 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        empty_27_reg_1091 <= empty_27_fu_537_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_reg_1005 <= empty_fu_330_p1;
        icmp_ln1072_2_reg_1010 <= icmp_ln1072_2_fu_334_p2;
        lhs_reg_999 <= lhs_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        gmem_addr_1_read_reg_1157 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        gmem_addr_1_reg_1096 <= p_cast_cast_mid164_fu_570_p1;
        gmem_addr_4_reg_1113 <= p_cast_cast_mid1_fu_615_p1;
        select_ln1072_8_reg_1102 <= select_ln1072_8_fu_580_p3;
        zext_ln1072_1_reg_1108[6 : 0] <= zext_ln1072_1_fu_587_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        gmem_addr_2_read_reg_1177 <= m_axi_gmem_RDATA;
        select_ln1072_10_reg_1172 <= select_ln1072_10_fu_839_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        gmem_addr_2_reg_1141 <= sext_ln232_fu_763_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        gmem_addr_4_read_reg_1162 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        gmem_addr_read_reg_1147 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_addr_reg_1046 <= p_cast_cast_fu_442_p1;
        j_2_reg_1036 <= rhs_fu_116;
        zext_ln1072_reg_1041[6 : 0] <= zext_ln1072_fu_410_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        k_4_reg_1076 <= k_4_fu_504_p2;
        lhs_mid1_reg_1057 <= lhs_mid1_fu_477_p2;
        p_mid120_reg_1081 <= p_mid120_fu_514_p2;
        select_ln1072_7_reg_1068 <= select_ln1072_7_fu_498_p3;
        tmp_mid1_reg_1063 <= tmp_mid1_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((select_ln1072_7_reg_1068 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        select_ln1072_9_reg_1167 <= select_ln1072_9_fu_812_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln1072_2_reg_1010 == 1'd0))) begin
        trunc_ln885_reg_1192 <= trunc_ln885_fu_872_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_subdone) & (icmp_ln1072_2_reg_1010 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage11_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15) & (icmp_ln1072_2_reg_1010 == 1'd0)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        grp_fu_880_ce = 1'b1;
    end else begin
        grp_fu_880_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)))) begin
        grp_fu_888_ce = 1'b1;
    end else begin
        grp_fu_888_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_1079)) begin
            m_axi_gmem_ARADDR = gmem_addr_3_reg_1134;
        end else if ((1'b1 == ap_condition_1075)) begin
            m_axi_gmem_ARADDR = gmem_addr_2_reg_1141;
        end else if ((1'b1 == ap_condition_422)) begin
            m_axi_gmem_ARADDR = gmem_addr_4_reg_1113;
        end else if ((1'b1 == ap_condition_404)) begin
            m_axi_gmem_ARADDR = gmem_addr_1_reg_1096;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            m_axi_gmem_ARADDR = gmem_addr_reg_1046;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln1072_2_reg_1010 == 1'd0)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_idle_pp0_1to1 == 1'b1) & (ap_start_int == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage11)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_W_cast_cast_fu_286_p1 = $signed(A_W_cast);

assign B_W_cast2_cast_fu_282_p1 = B_W_cast2;

assign add_ln1072_1_fu_339_p2 = (indvar_flatten93_fu_132 + 24'd1);

assign add_ln1072_fu_371_p2 = (indvar_flatten_fu_124 + 16'd1);

assign add_ln20_fu_353_p2 = (i_fu_128 + 7'd1);

assign add_ln232_1_fu_673_p2 = (select_ln1072_12_fu_663_p3 + trunc_ln232_fu_670_p1);

assign add_ln232_2_fu_640_p2 = (empty_27_reg_1091 + tmp_1);

assign add_ln232_3_fu_658_p2 = (empty_32_fu_654_p1 + tmp_1);

assign add_ln232_fu_747_p2 = (select_ln1072_11_fu_737_p3 + indvar1_cast_fu_744_p1);

assign add_ln885_fu_690_p2 = ($signed(sext_ln885_2_fu_686_p1) + $signed(mat_C));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((m_axi_gmem_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((m_axi_gmem_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((m_axi_gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = (m_axi_gmem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp0_stage7_iter1 = (m_axi_gmem_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1075 = ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_condition_1079 = ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_condition_404 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

always @ (*) begin
    ap_condition_422 = ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln1072_2_reg_1010 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage11;

assign conv_i60_fu_423_p1 = $signed(ret_fu_418_p2);

assign conv_i60_mid156_fu_552_p1 = lhs_mid1_reg_1057;

assign conv_i60_mid1_fu_596_p1 = $signed(ret_mid1_fu_590_p2);

assign empty_22_fu_533_p0 = zext_ln1072_reg_1041;

assign empty_22_fu_533_p1 = B_W_cast2_cast_reg_987;

assign empty_23_fu_414_p1 = k_fu_120[1:0];

assign empty_24_fu_427_p2 = ($signed(conv_i60_fu_423_p1) + $signed(mat_A));

assign empty_25_fu_452_p2 = (tmp_fu_406_p2 + empty_23_fu_414_p1);

assign empty_26_fu_784_p2 = gmem_addr_read_reg_1147 >> p_cast10_fu_780_p1;

assign empty_27_fu_537_p1 = empty_22_fu_533_p2[1:0];

assign empty_28_fu_718_p2 = (p_cast9_fu_715_p1 + mat_B);

assign empty_30_fu_482_p1 = lhs_mid1_fu_477_p2[1:0];

assign empty_31_fu_510_p1 = k_4_fu_504_p2[1:0];

assign empty_32_fu_654_p1 = p_mid114_fu_650_p2[1:0];

assign empty_fu_330_p1 = lhs_fu_325_p2[1:0];

assign grp_fu_880_p0 = grp_fu_880_p00;

assign grp_fu_880_p00 = select_ln1072_3_fu_359_p3;

assign grp_fu_880_p1 = sext_ln20_cast_reg_982;

assign grp_fu_880_p2 = grp_fu_880_p20;

assign grp_fu_880_p20 = select_ln1072_8_fu_580_p3;

assign icmp_ln1072_1_fu_462_p2 = (($signed(j_cast_fu_458_p1) < $signed(B_W)) ? 1'b1 : 1'b0);

assign icmp_ln1072_2_fu_334_p2 = ((indvar_flatten93_fu_132 == bound34) ? 1'b1 : 1'b0);

assign icmp_ln1072_3_fu_348_p2 = ((indvar_flatten_fu_124 == bound) ? 1'b1 : 1'b0);

assign indvar1_cast_fu_744_p1 = select_ln1072_8_reg_1102;

assign j_cast_fu_458_p1 = rhs_fu_116;

assign j_fu_629_p2 = (select_ln1072_8_fu_580_p3 + 7'd1);

assign k_4_fu_504_p2 = (select_ln1072_fu_467_p3 + 7'd1);

assign lhs_fu_325_p0 = lhs_fu_325_p00;

assign lhs_fu_325_p00 = i_fu_128;

assign lhs_fu_325_p1 = A_W_cast_cast_reg_993;

assign lhs_mid1_fu_477_p0 = lhs_mid1_fu_477_p00;

assign lhs_mid1_fu_477_p00 = add_ln20_reg_1026;

assign lhs_mid1_fu_477_p1 = A_W_cast_cast_reg_993;

assign lshr_ln232_fu_859_p2 = gmem_addr_2_read_reg_1177 >> zext_ln232_fu_855_p1;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_3_reg_1134;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = $unsigned(add_ln885_1_reg_1197);

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign p_cast10_fu_780_p1 = tmp_2_fu_773_p3;

assign p_cast10_mid174_fu_796_p1 = p_mid_fu_789_p3;

assign p_cast10_mid1_fu_826_p1 = p_mid1_fu_819_p3;

assign p_cast9_fu_715_p1 = empty_22_reg_1086;

assign p_cast9_mid1_fu_729_p1 = p_mid114_reg_1124;

assign p_cast_cast_fu_442_p1 = $signed(p_cast_fu_432_p4);

assign p_cast_cast_mid164_fu_570_p1 = $signed(p_cast_mid_fu_560_p4);

assign p_cast_cast_mid1_fu_615_p1 = $signed(p_cast_mid1_fu_605_p4);

assign p_cast_fu_432_p4 = {{empty_24_fu_427_p2[63:2]}};

assign p_cast_mid1_fu_605_p4 = {{p_mid116_fu_600_p2[63:2]}};

assign p_cast_mid_fu_560_p4 = {{p_mid158_fu_555_p2[63:2]}};

assign p_mid114_fu_650_p0 = zext_ln1072_1_reg_1108;

assign p_mid114_fu_650_p1 = B_W_cast2_cast_reg_987;

assign p_mid116_fu_600_p2 = ($signed(conv_i60_mid1_fu_596_p1) + $signed(mat_A));

assign p_mid120_fu_514_p2 = (select_ln1072_4_fu_491_p3 + empty_31_fu_510_p1);

assign p_mid124_fu_830_p2 = gmem_addr_4_read_reg_1162 >> p_cast10_mid1_fu_826_p1;

assign p_mid128_fu_732_p2 = (p_cast9_mid1_fu_729_p1 + mat_B);

assign p_mid158_fu_555_p2 = ($signed(conv_i60_mid156_fu_552_p1) + $signed(mat_A));

assign p_mid176_fu_800_p2 = gmem_addr_1_read_reg_1157 >> p_cast10_mid174_fu_796_p1;

assign p_mid1_fu_819_p3 = {{p_mid120_reg_1081}, {3'd0}};

assign p_mid_fu_789_p3 = {{tmp_mid1_reg_1063}, {3'd0}};

assign ret_fu_418_p2 = (lhs_reg_999 + zext_ln1072_fu_410_p1);

assign ret_mid1_fu_590_p2 = (select_ln1072_2_fu_547_p3 + zext_ln1072_1_fu_587_p1);

assign rhs_2_fu_864_p1 = lshr_ln232_fu_859_p2[7:0];

assign select_ln1072_10_fu_839_p3 = ((select_ln1072_7_reg_1068[0:0] == 1'b1) ? select_ln1072_9_reg_1167 : trunc_ln1072_2_fu_835_p1);

assign select_ln1072_11_fu_737_p3 = ((select_ln1072_7_reg_1068[0:0] == 1'b1) ? select_ln1072_5_fu_723_p3 : p_mid128_fu_732_p2);

assign select_ln1072_12_fu_663_p3 = ((select_ln1072_7_reg_1068[0:0] == 1'b1) ? select_ln1072_6_fu_644_p3 : add_ln232_3_fu_658_p2);

assign select_ln1072_13_fu_520_p3 = ((select_ln1072_7_fu_498_p3[0:0] == 1'b1) ? select_ln1072_fu_467_p3 : k_4_fu_504_p2);

assign select_ln1072_14_fu_377_p3 = ((icmp_ln1072_3_fu_348_p2[0:0] == 1'b1) ? 16'd1 : add_ln1072_fu_371_p2);

assign select_ln1072_1_fu_541_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? 7'd0 : j_2_reg_1036);

assign select_ln1072_2_fu_547_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? lhs_mid1_reg_1057 : lhs_reg_999);

assign select_ln1072_3_fu_359_p3 = ((icmp_ln1072_3_fu_348_p2[0:0] == 1'b1) ? add_ln20_fu_353_p2 : i_fu_128);

assign select_ln1072_4_fu_491_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? tmp_mid1_fu_486_p2 : tmp_fu_406_p2);

assign select_ln1072_5_fu_723_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? mat_B : empty_28_fu_718_p2);

assign select_ln1072_6_fu_644_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? tmp_1 : add_ln232_2_fu_640_p2);

assign select_ln1072_7_fu_498_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? icmp_ln1072 : icmp_ln1072_1_fu_462_p2);

assign select_ln1072_8_fu_580_p3 = ((select_ln1072_7_reg_1068[0:0] == 1'b1) ? select_ln1072_1_fu_541_p3 : 7'd0);

assign select_ln1072_9_fu_812_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? trunc_ln1072_fu_805_p1 : trunc_ln1072_1_fu_809_p1);

assign select_ln1072_fu_467_p3 = ((icmp_ln1072_3_reg_1014[0:0] == 1'b1) ? 7'd0 : k_fu_120);

assign sext_ln20_cast_fu_278_p1 = $signed(sext_ln20);

assign sext_ln232_fu_763_p1 = $signed(trunc_ln232_2_fu_753_p4);

assign sext_ln885_1_fu_705_p1 = $signed(trunc_ln885_1_fu_695_p4);

assign sext_ln885_2_fu_686_p1 = $signed(shl_ln1_fu_679_p3);

assign shl_ln1_fu_679_p1 = grp_fu_880_p3;

assign shl_ln1_fu_679_p3 = {{shl_ln1_fu_679_p1}, {2'd0}};

assign shl_ln_fu_848_p3 = {{add_ln232_1_reg_1129}, {3'd0}};

assign tmp_2_fu_773_p3 = {{empty_25_reg_1052}, {3'd0}};

assign tmp_fu_406_p2 = (empty_reg_1005 + mat_A_cast);

assign tmp_mid1_fu_486_p2 = (empty_30_fu_482_p1 + mat_A_cast);

assign trunc_ln1072_1_fu_809_p1 = empty_26_reg_1152[7:0];

assign trunc_ln1072_2_fu_835_p1 = p_mid124_fu_830_p2[7:0];

assign trunc_ln1072_fu_805_p1 = p_mid176_fu_800_p2[7:0];

assign trunc_ln232_2_fu_753_p4 = {{add_ln232_fu_747_p2[63:2]}};

assign trunc_ln232_fu_670_p1 = select_ln1072_8_reg_1102[1:0];

assign trunc_ln885_1_fu_695_p4 = {{add_ln885_fu_690_p2[63:2]}};

assign trunc_ln885_fu_872_p1 = m_axi_gmem_RDATA[17:0];

assign zext_ln1072_1_fu_587_p1 = k_4_reg_1076;

assign zext_ln1072_fu_410_p1 = k_fu_120;

assign zext_ln232_fu_855_p1 = shl_ln_fu_848_p3;

always @ (posedge ap_clk) begin
    B_W_cast2_cast_reg_987[14:8] <= 7'b0000000;
    zext_ln1072_reg_1041[14:7] <= 8'b00000000;
    zext_ln1072_1_reg_1108[14:7] <= 8'b00000000;
end

endmodule //matmul_matmul_Pipeline_VITIS_LOOP_20_2_VITIS_LOOP_21_3_VITIS_LOOP_22_4
